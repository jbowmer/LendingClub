geom_bar(stat = 'identity')
)
library(ggplot)
library(ggplot2)
ggplot(data = meat_by_year, aes(x = year, y = weight) +
geom_bar(stat = 'identity')
)
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar(stat = 'identity'))
ggplot(data = meat_by_year, aes(x = year, y = beef) +
geom_bar())
typeof(meat_by_year$year)
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity')
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous()
ggplot(meat_by_year, aes(x = year, y = beef)) +
geom_bar(stat = 'identity') +
scale_y_continuous() +
ggtitle('Head of Cattle Slaughtered by Year')
melt_data = melt(meat_by_year, id = year)
library(reshape)
library('reshape')
install.packages('reshape')
library(reshape)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id.var = year)
library(reshape2)
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = 'year')
melt_data = melt(meat_by_year, id = year)
melt_data = melt(meat_by_year, id = c('year'))
melt_data = melt(meat_by_year, id = c(year))
melt_data = melt(meat_by_year, id.vars = c('year'))
meat_by_year
melt_data = melt(meat_by_year, id.vars = 'year')
melt_data = melt(meat_by_year)
library(reshape2)
meat_by_year
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
melt_data
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x = year, y = value)) + geom_line() +
facet_wrap(~ variable)
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest"))
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes.palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(5, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(4, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette(3, "GrandBudapest")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Moonrise3")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal1")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
meat_by_year = select(meat_by_year,
year, beef, veal, pork, turkey)
melt_data = melt(as.data.frame(meat_by_year), id.vars = 'year')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
install.packages('wesanderson')
install.packages("wesanderson")
library(wesanderson)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
library(ggplot2)
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Royal2")) +
ggtitle('By Year, by type of Meat')
ggplot(melt_data, aes(x= year, y = value, color = variable)) +
geom_line() +
scale_fill_manual(values = wes_palette("Darjeeling2")) +
ggtitle('By Year, by type of Meat')
names(wes_palette)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
library(reshape2)
meat_melt = melt(as.data.frame(meat), id.vars = 'date')
meat_melt
head(meat)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
library(dplyr)
meat_one = select(meat,
date, beef, veal, pork, lamb_and_mutton, broilers, other_chicken, turkey)
meat_melt = melt(as.data.frame(meat_one), id.vars = 'date')
meat_melt
names(meat_melt)
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_line() +
ggtitle('Trends over time')
ggplot(meat_melt, aex(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aes(x = date, y = value, colour = variable)) +
geom_smooth()
ggplot(meat_melt, aex(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
ggplot(meat_melt, aes(x = date, y = value)) + geom_smooth() +
facet_wrap(~variable)
install.packages('stockPortfolio')
install.packages('quadprog')
stocks = c("SPY","EFA","IWM","VWO","LQD","HYG")
returns = getReturns(names(stocks), freq="week")
library(stockPortfolio)
library(quadprog)
returns = getReturns(names(stocks), freq="week")
install.packages('PortfolioAnalytics')
data(edhec)
library(PortfolioAnalytics)
data(edhec)
returns <- edhec[, 1:6]
head(returns)
init.portfolio = portfolio.spec(assets = funds)
init.portfolio = portfolio.spec(assets = fund_names)
fund_names = colnames(returns)
init.portfolio = portfolio.spec(assets = fund_names)
print.default(init.portfolio)
initial_portfolio <- add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = portfolio.spec(assets = fund_names)
print.default(initial_portfolio)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio <- add.constraint(portfolio = initial_portfolio, type = "long_only")
mininimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
print(miniumum_sd)
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
print(minimum_sd)
print(max_mean)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI")
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
library(ROI)
install.packages('ROI')
library(ROI)
minimum_sd_opt <- optimize.portfolio(R = returns, portfolio = minimum_sd,
optimize_method = "ROI", trace = TRUE)
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
max_mean = add.objective(portfolio=init.portfolio,
type="return",
name="mean")
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
data(edhec)
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio reutrn objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
print(minimum_sd)
print(max_mean)
install.packages('DEoptim')
require(ROI.plugin.glpk)
require(ROI.plugin.quadprog)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
funds = colnames(returns)
funds <- colnames(returns)
init.portfolio <- portfolio.spec(assets = funds)
init.portfolio <- add.constraint(portfolio = init.portfolio, type = "full_investment")
init.portfolio <- add.constraint(portfolio = init.portfolio, type = "long_only")
minSD.portfolio <- add.objective(portfolio=init.portfolio,
type="risk",
name="StdDev")
# Add objectives for portfolio to maximize mean per unit ES
meanES.portfolio <- add.objective(portfolio=init.portfolio,
type="return",
name="mean")
meanES.portfolio <- add.objective(portfolio=meanES.portfolio,
type="risk",
name="ES")
print(minSD.portfolio)
minSD.opt <- optimize.portfolio(R = returns, portfolio = minSD.portfolio,
optimize_method = "ROI", trace = TRUE)
print(minSD.opt)
install.packages('PortfolioAnalytics')
install.packages("PortfolioAnalytics")
library('PortfolioAnalytics')
library(ROI)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
library(PortfolioAnalytics)
data(edhec)
#A step to load the return data of our portfolio. stockPortfolio provides a number of helper functions.
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio return objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
print(minimum_sd)
print(max_mean)
#Now that the constraints have been provided, we optimise the portfolios. Note ROI here stands for R Optimisation infrastructure,
#not return on investment.
library(ROI)
#maiximise mean return:
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
library(PortfolioAnalytics)
#A simple program to perform optimisation.
#Load a portfolio of funds.
data(edhec)
#A step to load the return data of our portfolio. stockPortfolio provides a number of helper functions.
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
#Initial portfolio without constraints is equal weighted.
print.default(initial_portfolio)
#Investment constraints. Full investment, long only. Other constrains which can be imposed: leverage, position limit, diversification etc.
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "weight_sum", min_sum = 1, max_sum = 1)
#Portoflio objectives:
#Portfolio risk objective:
minimum_sd = add.objective(portfolio=initial_portfolio,
type="risk",
name="StdDev")
#Portfolio return objective
max_mean = add.objective(portfolio=initial_portfolio,
type="return",
name="mean")
print(minimum_sd)
print(max_mean)
#Now that the constraints have been provided, we optimise the portfolios. Note ROI here stands for R Optimisation infrastructure,
#not return on investment.
#maiximise mean return:
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean,
optimize_method = "ROI", trace = TRUE)
print(minimum_sd_opt)
install.packages('ROI.plugin.quadprog')
install.packages('ROI.plugin.glpk')
install.packages('iterators')
install.packages("iterators")
suppressMessages(library(PortfolioAnalytics))
suppressMessages(library(foreach))
suppressMessages(library(iterators))
suppressMessages(library(ROI))
suppressMessages(library(ROI.plugin.quadprog))
suppressMessages(library(ROI.plugin.glpk))
data(edhec)
returns <- edhec[, 1:4]
colnames(returns) <- c("CA", "CTAG", "DS", "EM")
print(head(returns, 5))
funds <- colnames(returns)
portf_maxret <- portfolio.spec(assets=funds)
portf_maxret <- add.constraint(portfolio=portf_maxret, type="full_investment")
portf_maxret <- add.objective(portfolio=portf_maxret, type="return", name="mean")
print(portf_maxret)
opt_maxret <- optimize.portfolio(R=returns, portfolio=portf_maxret,optimize_method="ROI", trace=TRUE)
funds <- colnames(returns)
portf_maxret <- portfolio.spec(assets=funds)
portf_maxret <- add.constraint(portfolio=portf_maxret, type="full_investment")
portf_maxret <- add.constraint(portfolio=portf_maxret, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
portf_maxret <- add.objective(portfolio=portf_maxret, type="return", name="mean")
print(portf_maxret)
opt_maxret <- optimize.portfolio(R=returns, portfolio=portf_maxret,optimize_method="ROI", trace=TRUE)
print(opt_maxret)
head(returns)
returns = edhec[, 1:6]
fund_names = colnames(returns)
head(returns)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio=portf_maxret, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
minimum_sd = add.objective(portfolio=initial_portfolio, type="risk", name="StdDev")
max_mean = add.objective(portfolio=initial_portfolio, type="return", name="mean")
print(minimum_sd)
print(max_mean)
opt_max_mean <- optimize.portfolio(R = returns, portfolio = max_mean, optimize_method = "ROI", trace = TRUE)
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02), max=c(0.55, 0.6, 0.65, 0.5))
initial_portfolio = portfolio.spec(assets = fund_names)
initial_portfolio = add.constraint(portfolio = initial_portfolio, type = "full_investment")
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02, 0.02), max=c(0.55, 0.6, 0.65, 0.5, 0.5))
initial_portfolio = add.constraint(portfolio= initial_portfolio, type="box", min=c(0.02, 0.05, 0.03, 0.02, 0.02, 0.02), max=c(0.55, 0.6, 0.65, 0.5, 0.5, 0.5))
max_mean = add.objective(portfolio=initial_portfolio, type="return", name="mean")
print(max_mean)
opt_max_mean = optimize.portfolio(R = returns, portfolio = max_mean, optimize_method ="ROI", trace = TRUE)
print(opt_max_mean)
getwd()
setwd("/Users/Jake/Projects/LendingClub")
getwd()
?read.csv()
data = read.csv("~/LoanStats3a.csv", header=TRUE, stringsAsFactors=FALSE, skip=1)
data = read.csv("~Projects/LendingClub/LoanStats3a.csv", header=TRUE, stringsAsFactors=FALSE, skip=1)
ls
data = read.csv("/Users/Jake/Projects/LendingClub/LoanStats3a.csv", header=TRUE, stringsAsFactors=FALSE, skip=1)
head(data)
dim(data)
dataone = data[, -'desc']
dataone = data[,!'desc']
dataone = subset(data, select = -desc)
data = subset(data, select = -desc)
summary(data)
data = select(data, id:last_credit_pull_d)
library(dplyr)
data = select(data, id:last_credit_pull_d)
head(data)
summary(data$loan_status)
summary(unique$loan_status)
table(df$loan_status)
df$loan_status = as.factor(df$loan_status)
type(df$loan_status)
df$loan_status = factor(df$loan_status)
head(df)
data$loan_status = factor(data$loan_status)
table(data$loan_status)
bad = c("Late (31-120 days)", "Default", "Charged Off")
data$bad_loans = ifelse(data$loan_status %in% bad, 1, ifelse(data$loan_status=="", NA, 0))
head(data)
table(data$bad_loans)
ggplot(data = data, aes(x = loan_amount), color = bad_loans) + geom_histogram()
library(ggplot2)
ggplot(data = data, aes(x = loan_amount), color = bad_loans) + geom_histogram()
ggplot(data = data, aes(x = loan_amnt), color = bad_loans) + geom_histogram()
summary(data$bad_loans)
data$bad_loans = factor(data$bad_loans)
ggplot(data = data, aes(x = loan_amnt), color = bad_loans) + geom_histogram()
ggplot(data = data, aes(x = loan_amnt, color = bad_loans)) + geom_histogram()
ggplot(data = data, aes(x = loan_amnt, color = bad_loans)) + geom_histogram() +
ggtitle ("Loan amount and relationship with bad loans")
ggplot(data = data, aes(x = loan_amnt, color = bad_loans)) + geom_freqpoly()
ggplot(data = data, aes(x = factor(term), color = bad_loans)) + geom_freqpoly() +
ggtitle("Loan amount and relationship with term")
ggplot(data = data, aes(x = term, color = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with term")
ggplot(data = data, aes(x = term,  fill =  bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with term")
ggplot(data = data, aes(x = int_rate, fill = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with interest rate")
ggplot(data = data, aes(x = int_rate, color = bad_loans)) + geom_freqpoly() +
ggtitle("Loan amount and relationship with interest rate")
ggplot(data = data, aes(x = int_rate, fill = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with interest rate")
ggplot(data = data, aes(x = grade, fill = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with loan grade")
date$home_owner = data$home_ownership !="RENT"
head(data)
date$renter = ifelse(data$home_ownership == 'RENT', 1, 0)
data$renter = ifelse(data$home_ownership == 'RENT', 1, 0)
data_rf = select(data, loan_amnt, term, int_rate, grade, renter, annual_inc)
data_rf = select(data, loan_amnt, term, int_rate, grade, renter, annual_inc, bad_loans)
data = mutate(data_rf, payment_percent = installment/annual_inc)
split = createDataPartition(data_rf$bad_loans, p=0.75, list = FALSE)
training = data_rf[split,]
test = data_rf[-split,]
library(caret)
split = createDataPartition(data_rf$bad_loans, p=0.75, list = FALSE)
training = data_rf[split,]
test = data_rf[-split,]
rf = randomForest(factor(bad_loans) ~ .,
type="classification", data=train, importance=TRUE, na.action=na.omit)
library(randomForest)
rf = randomForest(factor(bad_loans) ~ .,
type="classification", data=train, importance=TRUE, na.action=na.omit)
rf = randomForest(factor(bad_loans) ~ .,
type="classification", data=train, importance=TRUE, na.action=na.omitrf = randomForest(factor(bad_loans) ~ .,
type="classification", data=training, importance=TRUE, na.action=na.omit))
rf = randomForest(factor(bad_loans) ~ .,
type="classification", data=train, importance=TRUE, na.action=na.omitrf = randomForest(factor(bad_loans) ~ .,
type="classification", data=training, importance=TRUE, na.action=na.omit))
rf = randomForest(factor(bad_loans) ~ ., type="classification", data=training, importance=TRUE, na.action=na.omit)
summary(data_rf)
na.omit(data_rf)
data_rf = na.omit(data_rf)
split = createDataPartition(data_rf$bad_loans, p=0.75, list = FALSE)
training = data_rf[split,]
test = data_rf[-split,]
rf = randomForest(factor(bad_loans) ~ ., type="classification", data=training, importance=TRUE, na.action=na.omit)
rf = randomForest(factor(bad_loans) ~ loan_amnt + term + int_rate + grade + renter + annual_inc,
type="classification", data=training, importance=TRUE, na.action=na.omit)
rf = randomForest(as.factor(bad_loans) ~ loan_amnt + term + int_rate + grade + renter + annual_inc,
type="classification", data=training, importance=TRUE, na.action=na.omit)
data_rf$bad_loans
summary(data_rf$bad_loans)
summary(data_rf)
data_rf$grade = factor(data_rf$grade)
data_rf$int_rate = numeric(data_rf$int_rate)
data_rf$int_rate = as.numeric(data_rf$int_rate)
summary(data_rf$int_rate)
data$int_rate
data_rf = select(data, loan_amnt, term, grade, renter, annual_inc, bad_loans)
summary(data_rf)
data_rf = na.omit(data_rf)
data_rf$grade = factor(data_rf$grade)
data_rf$term = factor(data_rf$term)
data_rf = na.omit(data_rf)
split = createDataPartition(data_rf$bad_loans, p=0.75, list = FALSE)
training = data_rf[split,]
test = data_rf[-split,]
rf = randomForest(as.factor(bad_loans) ~ loan_amnt + term + int_rate + grade + renter + annual_inc,
type="classification", data=training, importance=TRUE, na.action=na.omit)
rf = randomForest(as.factor(bad_loans) ~ loan_amnt + term + grade + renter + annual_inc,
type="classification", data=training, importance=TRUE, na.action=na.omit)
rf
data_rf_predict = predict(rf, newdata = test)
summary(rf)
library(ROCR)
install.packages("ROCR")
library(ROCR)
pred = prediction(data_rf_predict, test$bad_loans)
data_rf_predict
summary(data_rf_predict)
library(pROC)
summary(test$bad_loans)
pred = prediction(data_rf_predict, test$bad_loans)
pred = prediction(data_rf_predict, factor(test$bad_loans))
pred = prediction(factor(data_rf_predict), factor(test$bad_loans))
str(pred)
str(data_rf_predict)
data_rf_predict = factor(predict(rf, newdata = test))
str(data_rf_predict)
str(test$bad_loans)
observed = ifelse(test$bad_loans == 0, 0, 1)
observed
pred = prediction(data_rf_predict, observed)
table(data_rf_predict, observed)
head(data)
df = read.csv("/Users/Jake/Projects/LendingClub/LoanStats3a.csv", header=TRUE, stringsAsFactors=FALSE, skip=1)
table(data_rf_predict, test$bad_loans)
head(df)
names9df
names(df)
df$fico_range
ggplot(data = data, aes(x = loan_amnt, fill = bad_loans)) + geom_histogram() +
ggtitle ("Loan amount and relationship with bad loans")
ggplot(data = data, aes(x = loan_amnt, color = bad_loans)) + geom_freqpoly() +
ggtitle("Loan amount and relationship with bad loans")
ggplot(data = data, aes(x = term,  fill =  bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with term")
ggplot(data = data, aes(x = int_rate, fill = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with interest rate") #This chart can be improved with binning into categories.
ggplot(data = data, aes(x = grade, fill = bad_loans)) + geom_bar() +
ggtitle("Loan amount and relationship with loan grade") #Potentially the most interesting chart of the ones presented.
library(lubridate)
source('~/.active-rstudio-document', echo=TRUE)
